{"version":3,"file":"fn.js","sourceRoot":"","sources":["fn.ts"],"names":[],"mappings":";;;AACA,+BAA4B;AAC5B,gEAAwD;AACxD,0CAAkD;AAClD,oDAAoD;AAE7C,KAAK,UAAU,iBAAiB,CAAC,GAAY;IAEnD,MAAM,QAAQ,GAAG,IAAA,wBAAY,EAAC;QAC7B,GAAG;KACH,CAAC,CAAC;IACH,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,IAAI,EAClB;QACC,MAAM,IAAI,GAAG,IAAA,WAAI,EAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAE9C,OAAO,IAAA,mBAAQ,EAAC,IAAI,EAAE,OAAO,CAAC;aAC5B,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAEpB,IAAI,GAAG,GAAG,IAAA,4BAAU,EAAC,IAAI,CAAC,CAAC;YAE3B,IAAI,GAAG,CAAC,gBAAgB,EACxB;gBACC,MAAM,IAAA,oBAAS,EAAC,IAAI,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC;aACxC;YAED,OAAO;gBACN,GAAG,GAAG;gBACN,QAAQ;gBACR,IAAI;aACJ,CAAA;QACF,CAAC,CAAC,CAAA;KACH;AACF,CAAC;AA1BD,8CA0BC","sourcesContent":["import { readFileSync } from 'fs';\nimport { join } from 'path';\nimport { yarnDedupe } from '@yarn-tool/yarnlock-dedupe';\nimport { readFile, writeFile } from 'fs/promises';\nimport { findRootLazy } from '@yarn-tool/find-root';\n\nexport async function autoDeduplication(cwd?: string)\n{\n\tconst rootData = findRootLazy({\n\t\tcwd,\n\t});\n\tif (rootData?.root)\n\t{\n\t\tconst file = join(rootData.root, 'yarn.lock');\n\n\t\treturn readFile(file, 'utf-8')\n\t\t\t.then(async (data) => {\n\n\t\t\t\tlet ret = yarnDedupe(data);\n\n\t\t\t\tif (ret.yarnlock_changed)\n\t\t\t\t{\n\t\t\t\t\tawait writeFile(file, ret.yarnlock_new);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...ret,\n\t\t\t\t\trootData,\n\t\t\t\t\tfile,\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\n"]}